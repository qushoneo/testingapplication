generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  password       String
  jobTitle       String
  createdAt      DateTime        @default(now())
  companyId      Int
  company        Company?        @relation(fields: [companyId], references: [id])
  role           Role            @default(USER)
  projects       Project[]       @relation("ProjectMembers")
  forgotPassword ForgotPassword?
  notifications  Notification[]
  testRuns       TestRun[]
}

model Company {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  users       User[]
  projects    Project[]
  folders     Folder[]
  invitations Invitation[]
}

model Project {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  users     User[]     @relation("ProjectMembers")
  folders   Folder[]
  testCases TestCase[]
  testPlans TestPlan[]
  testRuns  TestRun[]
}

model Folder {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  parent      Folder?  @relation("FolderChildren", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderChildren")

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  testCases TestCase[]
}

model TestCase {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  severity    Severity?
  createdAt   DateTime  @default(now())

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  folderId Int
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  testPlans    TestPlan[]    @relation("TestPlanTestCases")
  testCaseRuns TestCaseRun[]
  testRuns     TestRun[]     @relation("TestRunTestCases")
}

model TestPlan {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  testCases TestCase[] @relation("TestPlanTestCases")
  testRuns  TestRun[]
}

model TestRun {
  id           Int                  @id @default(autoincrement())
  name         String
  userId       Int
  user         User                 @relation(fields: [userId], references: [id])
  projectId    Int
  project      Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testPlanId   Int?
  testPlan     TestPlan?            @relation(fields: [testPlanId], references: [id], onDelete: Cascade)
  status       TestRunStatus        @default(inProgress)
  createdAt    DateTime             @default(now())
  duration     Int?                 @default(0)
  optionalInfo OptionalTestRunInfo?
  testCaseRuns TestCaseRun[]
  testCases    TestCase[]           @relation("TestRunTestCases")
}

model TestCaseRun {
  id         Int            @id @default(autoincrement())
  testRunId  Int
  testRun    TestRun        @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  testCaseId Int
  testCase   TestCase       @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  status     TestCaseStatus @default(untested)
  comment    String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([testRunId, testCaseId])
}

model OptionalTestRunInfo {
  id          Int     @id @default(autoincrement())
  environment String?
  os          String?
  screenSize  String?
  testRun     TestRun @relation(fields: [testRunId], references: [id])
  testRunId   Int     @unique
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model ForgotPassword {
  id        String   @id @default(uuid())
  validCode String
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

enum TestRunStatus {
  passed
  inProgress
  failed
  untested
  skipped
}

enum TestCaseStatus {
  passed
  failed
  untested
  skipped
}

model Bug {
  id         Int      @id @default(autoincrement())
  text       String
  screenshot String?
  createdAt  DateTime @default(now())
}
